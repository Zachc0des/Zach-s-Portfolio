--------------------------------
 --How to Create a Table & Query an Ip log

--Zachc0des

----------------------------------
--STEP 1 

-- Table creation----
--CREATE TABLE IF NOT EXISTS: Command that will create a a new database table **only if it does not already exist**.

-- (ip_log: Name of the table to be created.)

-- ID SERIAL PRIMARY KEY: PostgreSQL command that creates a speccial column for uniqely identiifying each row in a table. 
--  ^^ ID: Column name, SERIAL: Data type that auto-increments the value for each new row(1,2,3,4,5), PRIMARY KEY: Specifies that this column is the primary key of the table.^^

-- Time stamp TIMESTAMP: PostgreSQL command that creates a column for storing date and time values.

-- source_Ip INET: PostgreSQL command that creates a column for storing IP addresses in the INET data type.

-- dust_ip INET: PostgreSQL command that creates a column for storing destination IP addresses in the INET data type.

-- Port INTERGER: PostgreSQL command that creates a column for storing port numbers as integers.

-- prtocol VARCHAR: PostgreSQL command that creates a column for storing protocol names as variable character strings with a maximum length of 10 characters.

-- Acion Varchar: PostgreSQL command that creates a column for storing action types (e.g., allow, deny) as variable character strings with a maximum length of 10 characters.

-- bytes INTERGER: PostgreSQL command that creates a column for storing the number of bytes transferred as an integer.

-- status VARCHAR: PostgreSQL command that creates a column for storing status messages as variable character strings with a maximum length of 20 characters.
-----------------------------
CREATE TABLE IF NOT EXISTS ip_log (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMP,
    source_ip INET,
    dest_ip INET,
    port INTEGER,
    protocol VARCHAR(10),
    action VARCHAR(10),
    bytes INTEGER,
    status VARCHAR(20)
);
----------------------
--STEP 2
-- /d ip_log; This command will display the structure of the table ip_log, showing the columns and their data
---------------------===========
    /d ip_log;
-----------------------------

--STEP 3 
-- INSERT INTO IP_LOG: Command that will insert new rows into the ip_log table.
-- (timestamp, source_ip, dest_ip, port, protocol, action, bytes, status): Specifies the columns into which data will be inserted.
-- VALUES: SQL Keyword that separates the colum names from the actual data, Everything after this keyword is the data that will be inserted into the table.
-------------------------------------

INSERT INTO ip_log (timestamp, source_ip, dest_ip, port, protocol, action, bytes, status) VALUES
('2025-01-15 08:23:14', '192.168.1.101', '8.8.8.8', 53, 'UDP', 'ALLOW', 64, 'SUCCESS'),
('2025-01-15 08:23:15', '192.168.1.102', '172.217.12.46', 443, 'TCP', 'ALLOW', 1024, 'SUCCESS'),
('2025-01-15 08:24:32', '10.0.0.5', '192.168.1.200', 22, 'TCP', 'DENY', 0, 'BLOCKED'),
('2025-01-15 08:25:01', '192.168.1.103', '54.230.87.12', 80, 'TCP', 'ALLOW', 2048, 'SUCCESS'),
('2025-01-15 08:26:45', '172.16.0.10', '192.168.1.101', 3389, 'TCP', 'DENY', 0, 'BLOCKED')

---------------------------------------

--STEP 4 
-- (SELECT 'DATA INSERTION VERIFCATION' as check type;   --SELECT command that will retrieve data from the ip_log table
-- SELECT COUNT(*) FROM ip_log;):   --This command will count the number of rows in the ip_log table to verify that data has been inserted correctly.

----------------------------------------

SELECT 'DATA INSERTION VERIFICATION' as check_type, 
       COUNT(*) as total records FROM  ip_log;
-----------------------------------------

--STEP 5





